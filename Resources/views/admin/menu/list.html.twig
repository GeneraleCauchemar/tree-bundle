{% extends umanit_tree_admin_layout %}

{% block content %}
  <div class="nav-tabs-custom">
    <ul class="nav nav-tabs pull-right">
      {% for menu in menus|reverse %}
        <li{% if loop.last %} class="active"{% endif %}>
          <a href="#{{ menu }}" data-toggle="tab" data-menu="{{ menu }}">{{ menu|trans }}</a>
        </li>
      {% endfor %}
      <li class="pull-left header"><i class="glyphicon glyphicon-menu-hamburger"></i> {{ 'Menus' | trans }}</li>
    </ul>
    <div class="tab-content">
      <div class="tab-pane active">
        <div class="row">
          <div id="tree-container" class="col-md-8 panel-body">
            <div id="tree" class="fancytree-colorize-hover fancytree-fade-expander umanit-fancytree"></div>
          </div>
          <div class="col-md-4">
            <div class="btn-group pull-right">
              <a id="add-menu-item" role="menuitem" class="btn btn-primary" tabindex="-1" href="#">
                <i class="fas fa-plus-circle" aria-hidden="true"></i> {{ 'Add' | trans }}
              </a>
              <form class="btn-group inline" action="{{ path("tree_admin_menu_edit") }}">
                <input type="hidden" name="id" value="" data-node="id">
                <button type="submit" data-node-action="edit" disabled="disabled" class="btn btn-default">
                  <i class="fas fa-pencil" aria-hidden="true"></i> {{ 'Edit' | trans }}
                </button>
              </form>

              <form class="btn-group inline" action="{{ path("tree_admin_menu_delete") }}" data-form="delete">
                <input type="hidden" name="id" value="" data-node="id">
                <button type="submit" data-node-action="delete" disabled="disabled" class="btn btn-default">
                  <i class="fas fa-times" aria-hidden="true"></i> {{ 'Delete' | trans }}
                </button>
              </form>
            </div>
          </div>
        </div>
      </div>
      <!-- /.tab-pane -->
    </div>
    <!-- /.tab-content -->
  </div>


  <!-- Add code to initialize the tree when the document is loaded: -->
  <script type="text/javascript">
    $(function () {
      $('[data-form=\'delete\']').on('submit', function () {
        return confirm('Êtes-vous sûr de supprimer cet item (et ses enfants) ?');
      });

      glyph_opts = {
        map: {
          doc: 'glyphicon glyphicon-file',
          docOpen: 'glyphicon glyphicon-file',
          checkbox: 'glyphicon glyphicon-unchecked',
          checkboxSelected: 'glyphicon glyphicon-check',
          checkboxUnknown: 'glyphicon glyphicon-share',
          dragHelper: 'glyphicon glyphicon-play',
          dropMarker: 'glyphicon glyphicon-arrow-right',
          error: 'glyphicon glyphicon-warning-sign',
          expanderClosed: 'glyphicon glyphicon-menu-right',
          expanderLazy: 'glyphicon glyphicon-menu-right',  // glyphicon-plus-sign
          expanderOpen: 'glyphicon glyphicon-menu-down',  // glyphicon-collapse-down
          folder: 'glyphicon glyphicon-folder-close',
          folderOpen: 'glyphicon glyphicon-folder-open',
          loading: 'glyphicon glyphicon-refresh glyphicon-spin',
        },
      };

      $('a[data-toggle="tab"]').on('show.bs.tab', function (e) {
        var menuIdentifier = $(e.target).data('menu');
        initFancyTree(menuIdentifier);
      });

      var lastTab = $('a[data-toggle="tab"]:last');
      lastTab.tab('show');
      initFancyTree(lastTab.data('menu'));

      function initFancyTree(menuIdentifier) {
        $('#tree-container').empty();
        $('#tree-container').append('<div id="tree" class="fancytree-colorize-hover fancytree-fade-expander umanit-fancytree"></div>');
        $('a#add-menu-item').attr('href', '{{ path('tree_admin_menu_add') }}?identifier=' + menuIdentifier);
        // Initialize Fancytree
        $('#tree').fancytree({
          extensions: ['glyph', 'dnd'],
          selectMode: 1,
          minExpandLevel: 10,
          source: { url: "{{ path("tree_admin_menu_json") }}?identifier=" + menuIdentifier, debugDelay: 1000 },
          glyph: glyph_opts,
          dnd: {
            preventVoidMoves: true, // Prevent dropping nodes 'before self', etc.
            preventRecursiveMoves: true, // Prevent dropping nodes on own descendants
            autoExpandMS: 400,
            refreshPositions: true,
            draggable: {
              appendTo: 'body',  // We don't want to clip the helper inside container
              // scroll: false,
              // containment: "parent",  // $("ul.fancytree-container"),
              // cursorAt: { left: 5 },
              revert: 'invalid',
              // revert: function(dropped) {
              //   return
              // }
            },
            dragStart: function (node, data) {
              // allow dragging `node`:
              return true;
            },
            dragEnter: function (node, data) {
              return true;
            },
            initHelper: function (node, data) {
              // Helper was just created: modify markup
              var helper = data.ui.helper,
                sourceNodes = data.tree.getSelectedNodes();

              // Store a list of active + all selected nodes
              if (!node.isSelected()) {
                sourceNodes.unshift(node);
              }
              helper.data('sourceNodes', sourceNodes);
              // Mark selected nodes also as drag source (active node is already)
              $('.fancytree-active,.fancytree-selected', tree.$container)
                .addClass('fancytree-drag-source');
              // Add a counter badge to helper if dragging more than one node
              if (sourceNodes.length > 1) {
                helper.append($('<span class=\'fancytree-childcounter\'/>')
                  .text('+' + (sourceNodes.length - 1)));
              }
              // Prepare an indicator for copy-mode
              helper.prepend($('<span class=\'fancytree-dnd-modifier\'/>')
                .text('+').hide());
            },
            updateHelper: function (node, data) {
              var tree = node.tree,
                copyMode = false;

              // Show/hide the helper's copy indicator (+)
              data.ui.helper.find('.fancytree-dnd-modifier').toggle(copyMode);
              // Dim the source node(s) in move-mode
              $('.fancytree-drag-source', tree.$container)
                .toggleClass('fancytree-drag-remove', !copyMode);
            },
            dragDrop: function (node, data) {
              var sourceNodes = data.ui.helper.data('sourceNodes'),
                copyMode = false;

              if (copyMode) {
                $.each(sourceNodes, function (i, o) {
                  o.copyTo(node, data.hitMode, function (n) {
                    delete n.key;
                    n.selected = false;
                    n.title = 'Copy of ' + n.title;
                  });
                });
              } else {
                $.each(sourceNodes, function (i, o) {
                  console.log(data.hitMode, node.title, o.title, node.key.replace('menu_', ''), o.key.replace('menu_', ''));
                  $.post(
                    "{{ path('tree_admin_menu_move') }}",
                    {
                      moved_node: o.key.replace('menu_', ''),
                      destination_node: node.key.replace('menu_', ''),
                      mode: data.hitMode,
                    },
                    function (data) {
                      if (data != true) {
                        alert('The menu has not been updated. Please reload the page');
                      }
                    },
                  ).fail(function () {
                    alert('An error occured. The menu has not been updated.');
                  });
                  o.moveTo(node, data.hitMode);
                });
              }
            },
          },
          activate: function (event, data) {
            var node = data.node;
            $('[data-node=\'id\']').each(function (index, input) {
              input.value = node.key.replace('menu_', '');
            });
            $('[data-node-action]').enable();
          },
        });
      }
    });
  </script>
{% endblock %}
